// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_account.sql

package postgresdb

import (
	"context"
	"time"
)

const addRoleToUserAccount = `-- name: AddRoleToUserAccount :exec
insert into user_role (
  user_id, role_id
) values (
  $1, $2
)
`

type AddRoleToUserAccountParams struct {
	UserID int64
	RoleID int32
}

func (q *Queries) AddRoleToUserAccount(ctx context.Context, arg AddRoleToUserAccountParams) error {
	_, err := q.db.Exec(ctx, addRoleToUserAccount, arg.UserID, arg.RoleID)
	return err
}

const createUserAccount = `-- name: CreateUserAccount :one
insert into user_account (
  email, username, password_hash
) values (
  $1, $2, $3
) returning id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at
`

type CreateUserAccountParams struct {
	Email        string
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount, arg.Email, arg.Username, arg.PasswordHash)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
update user_account
  set deleted_at = $1
where id = $2
`

type DeleteUserAccountParams struct {
	DeletedAt *time.Time
	ID        int64
}

func (q *Queries) DeleteUserAccount(ctx context.Context, arg DeleteUserAccountParams) error {
	_, err := q.db.Exec(ctx, deleteUserAccount, arg.DeletedAt, arg.ID)
	return err
}

const getUserAccount = `-- name: GetUserAccount :one
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
where id = $1 limit 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id int64) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserAccount, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserAccountByUsername = `-- name: GetUserAccountByUsername :one
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
where username = $1 limit 1
`

func (q *Queries) GetUserAccountByUsername(ctx context.Context, username string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserAccountByUsername, username)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserAccount = `-- name: ListUserAccount :many
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
`

func (q *Queries) ListUserAccount(ctx context.Context) ([]UserAccount, error) {
	rows, err := q.db.Query(ctx, listUserAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.Avatar,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserAccountRoles = `-- name: ListUserAccountRoles :many
select r.id, r.name, r.description from role as r
join (
  select role_id from user_role
  where user_id = $1
) as ur on r.id = ur.role_id
`

func (q *Queries) ListUserAccountRoles(ctx context.Context, userID int64) ([]Role, error) {
	rows, err := q.db.Query(ctx, listUserAccountRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserAccountScopes = `-- name: ListUserAccountScopes :many
select distinct sc.id, sc.name, sc.description 
from scope as sc
join (
  select distinct rsc.scope_id 
  from role_scope as rsc
  join (
    select id as role_id from role as r
    join (
      select role_id from user_role
      where user_id = $1
    ) as ur on r.id = ur.role_id
  ) as r on rsc.role_id = r.role_id
) as usc on sc.id = rsc.scope_id
`

func (q *Queries) ListUserAccountScopes(ctx context.Context, userID int64) ([]Scope, error) {
	rows, err := q.db.Query(ctx, listUserAccountScopes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scope
	for rows.Next() {
		var i Scope
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccount = `-- name: UpdateUserAccount :exec
update user_account
  set email = $1,
  username = $2
where id = $3
`

type UpdateUserAccountParams struct {
	Email    string
	Username string
	ID       int64
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) error {
	_, err := q.db.Exec(ctx, updateUserAccount, arg.Email, arg.Username, arg.ID)
	return err
}

const updateUserAccountAvatar = `-- name: UpdateUserAccountAvatar :exec
update user_account
  set avatar = $1
where id = $2
`

type UpdateUserAccountAvatarParams struct {
	Avatar string
	ID     int64
}

func (q *Queries) UpdateUserAccountAvatar(ctx context.Context, arg UpdateUserAccountAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountAvatar, arg.Avatar, arg.ID)
	return err
}

const updateUserAccountPassword = `-- name: UpdateUserAccountPassword :exec
update user_account
  set password_hash = $1
where id = $2
`

type UpdateUserAccountPasswordParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateUserAccountPassword(ctx context.Context, arg UpdateUserAccountPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountPassword, arg.PasswordHash, arg.ID)
	return err
}

const updateUserAccountVerifiedStatus = `-- name: UpdateUserAccountVerifiedStatus :exec
update user_account
  set is_verified = $1
where email = $2
`

type UpdateUserAccountVerifiedStatusParams struct {
	IsVerified bool
	Email      string
}

func (q *Queries) UpdateUserAccountVerifiedStatus(ctx context.Context, arg UpdateUserAccountVerifiedStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountVerifiedStatus, arg.IsVerified, arg.Email)
	return err
}

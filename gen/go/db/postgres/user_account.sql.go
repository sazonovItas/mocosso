// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_account.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAccount = `-- name: CreateUserAccount :one
insert into user_account (
  email, username, password_hash
) values (
  $1, $2, $3
) returning id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at
`

type CreateUserAccountParams struct {
	Email        string
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount, arg.Email, arg.Username, arg.PasswordHash)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
update user_account
  set deleted_at = $1
where id = $2
`

type DeleteUserAccountParams struct {
	DeletedAt pgtype.Timestamptz
	ID        int64
}

func (q *Queries) DeleteUserAccount(ctx context.Context, arg DeleteUserAccountParams) error {
	_, err := q.db.Exec(ctx, deleteUserAccount, arg.DeletedAt, arg.ID)
	return err
}

const getUserAccount = `-- name: GetUserAccount :one
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
where id = $1 limit 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id int64) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserAccount, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserAccountByUsername = `-- name: GetUserAccountByUsername :one
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
where username = $1 limit 1
`

func (q *Queries) GetUserAccountByUsername(ctx context.Context, username string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserAccountByUsername, username)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Avatar,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserAccount = `-- name: ListUserAccount :many
select id, email, username, password_hash, avatar, is_verified, created_at, updated_at, deleted_at from user_account
`

func (q *Queries) ListUserAccount(ctx context.Context) ([]UserAccount, error) {
	rows, err := q.db.Query(ctx, listUserAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.Avatar,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoles = `-- name: ListUserRoles :many
select r.id, r.name, r.description from role as r
join (
  select role_id from user_role
  where user_id = $1
) as ur on r.id = ur.id
`

func (q *Queries) ListUserRoles(ctx context.Context, userID int64) ([]Role, error) {
	rows, err := q.db.Query(ctx, listUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccount = `-- name: UpdateUserAccount :exec
update user_account
  set email = $1,
  username = $2
where id = $1
`

type UpdateUserAccountParams struct {
	Email    string
	Username string
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) error {
	_, err := q.db.Exec(ctx, updateUserAccount, arg.Email, arg.Username)
	return err
}

const updateUserAccountAvatar = `-- name: UpdateUserAccountAvatar :exec
update user_account
  set avatar = $1
where id = $2
`

type UpdateUserAccountAvatarParams struct {
	Avatar pgtype.Text
	ID     int64
}

func (q *Queries) UpdateUserAccountAvatar(ctx context.Context, arg UpdateUserAccountAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountAvatar, arg.Avatar, arg.ID)
	return err
}

const updateUserAccountVerifiedStatus = `-- name: UpdateUserAccountVerifiedStatus :exec
update user_account
  set is_verified = $1
where email = $2
`

type UpdateUserAccountVerifiedStatusParams struct {
	IsVerified pgtype.Bool
	Email      string
}

func (q *Queries) UpdateUserAccountVerifiedStatus(ctx context.Context, arg UpdateUserAccountVerifiedStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountVerifiedStatus, arg.IsVerified, arg.Email)
	return err
}

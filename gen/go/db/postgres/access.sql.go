// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: access.sql

package postgresdb

import (
	"context"
	"time"
)

const createUserAccess = `-- name: CreateUserAccess :one
insert into access (
  user_id, device_id, refresh_token, expires_at
) values (
  $1, $2, $3, $4
) returning id, user_id, device_id, refresh_token, created_at, last_used_at, expires_at
`

type CreateUserAccessParams struct {
	UserID       int64
	DeviceID     int64
	RefreshToken string
	ExpiresAt    time.Time
}

func (q *Queries) CreateUserAccess(ctx context.Context, arg CreateUserAccessParams) (Access, error) {
	row := q.db.QueryRow(ctx, createUserAccess,
		arg.UserID,
		arg.DeviceID,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteUserAccess = `-- name: DeleteUserAccess :exec
delete from access
where id = $1
`

func (q *Queries) DeleteUserAccess(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserAccess, id)
	return err
}

const getUserAccess = `-- name: GetUserAccess :one
select id, user_id, device_id, refresh_token, created_at, last_used_at, expires_at from access
where id = $1 limit 1
`

func (q *Queries) GetUserAccess(ctx context.Context, id int64) (Access, error) {
	row := q.db.QueryRow(ctx, getUserAccess, id)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserDeviceAccess = `-- name: GetUserDeviceAccess :one
select id, user_id, device_id, refresh_token, created_at, last_used_at, expires_at from access
where device_id = $1 limit 1
`

func (q *Queries) GetUserDeviceAccess(ctx context.Context, deviceID int64) (Access, error) {
	row := q.db.QueryRow(ctx, getUserDeviceAccess, deviceID)
	var i Access
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listUserAccess = `-- name: ListUserAccess :many
select id, user_id, device_id, refresh_token, created_at, last_used_at, expires_at from access
where user_id = $1
`

func (q *Queries) ListUserAccess(ctx context.Context, userID int64) ([]Access, error) {
	rows, err := q.db.Query(ctx, listUserAccess, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Access
	for rows.Next() {
		var i Access
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceID,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

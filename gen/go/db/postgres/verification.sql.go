// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verification.sql

package postgresdb

import (
	"context"
	"time"
)

const createVerification = `-- name: CreateVerification :one
insert into verification (
  email, type, code, token, expires_at
) values (
  $1, $2, $3, $4, $5
) returning email, type, code, token, expires_at, updated_at
`

type CreateVerificationParams struct {
	Email     string
	Type      string
	Code      string
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateVerification(ctx context.Context, arg CreateVerificationParams) (Verification, error) {
	row := q.db.QueryRow(ctx, createVerification,
		arg.Email,
		arg.Type,
		arg.Code,
		arg.Token,
		arg.ExpiresAt,
	)
	var i Verification
	err := row.Scan(
		&i.Email,
		&i.Type,
		&i.Code,
		&i.Token,
		&i.ExpiresAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVerification = `-- name: DeleteVerification :exec
delete from verification
where email = $1
`

func (q *Queries) DeleteVerification(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteVerification, email)
	return err
}

const getVerificationByEmail = `-- name: GetVerificationByEmail :one
select email, type, code, token, expires_at, updated_at from verification
where email = $1 limit 1
`

func (q *Queries) GetVerificationByEmail(ctx context.Context, email string) (Verification, error) {
	row := q.db.QueryRow(ctx, getVerificationByEmail, email)
	var i Verification
	err := row.Scan(
		&i.Email,
		&i.Type,
		&i.Code,
		&i.Token,
		&i.ExpiresAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVerificationByToken = `-- name: GetVerificationByToken :one
select email, type, code, token, expires_at, updated_at from verification
where token = $1 limit 1
`

func (q *Queries) GetVerificationByToken(ctx context.Context, token string) (Verification, error) {
	row := q.db.QueryRow(ctx, getVerificationByToken, token)
	var i Verification
	err := row.Scan(
		&i.Email,
		&i.Type,
		&i.Code,
		&i.Token,
		&i.ExpiresAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVerification = `-- name: UpdateVerification :exec
update verification 
  set type = $1,
  code = $2,
  token = $3,
  expires_at = $4
where email = $5
`

type UpdateVerificationParams struct {
	Type      string
	Code      string
	Token     string
	ExpiresAt time.Time
	Email     string
}

func (q *Queries) UpdateVerification(ctx context.Context, arg UpdateVerificationParams) error {
	_, err := q.db.Exec(ctx, updateVerification,
		arg.Type,
		arg.Code,
		arg.Token,
		arg.ExpiresAt,
		arg.Email,
	)
	return err
}

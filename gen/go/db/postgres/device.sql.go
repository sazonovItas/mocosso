// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device.sql

package postgresdb

import (
	"context"
)

const createUserDevice = `-- name: CreateUserDevice :one
insert into device (
  name, user_id, hash_id 
) values (
  $1, $2, $3
) returning id, name, user_id, hash_id, last_used_at, created_at, updated_at
`

type CreateUserDeviceParams struct {
	Name   string
	UserID int64
	HashID string
}

func (q *Queries) CreateUserDevice(ctx context.Context, arg CreateUserDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createUserDevice, arg.Name, arg.UserID, arg.HashID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.HashID,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserDevice = `-- name: DeleteUserDevice :exec
delete from device 
where id = $1
`

func (q *Queries) DeleteUserDevice(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserDevice, id)
	return err
}

const deleteUserDeviceByHashID = `-- name: DeleteUserDeviceByHashID :exec
delete from device
where hash_id = $1
`

func (q *Queries) DeleteUserDeviceByHashID(ctx context.Context, hashID string) error {
	_, err := q.db.Exec(ctx, deleteUserDeviceByHashID, hashID)
	return err
}

const getUserDevice = `-- name: GetUserDevice :one
select id, name, user_id, hash_id, last_used_at, created_at, updated_at from device
where id = $1 limit 1
`

func (q *Queries) GetUserDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getUserDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.HashID,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDeviceByHashID = `-- name: GetUserDeviceByHashID :one
select id, name, user_id, hash_id, last_used_at, created_at, updated_at from device
where hash_id = $1 limit 1
`

func (q *Queries) GetUserDeviceByHashID(ctx context.Context, hashID string) (Device, error) {
	row := q.db.QueryRow(ctx, getUserDeviceByHashID, hashID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.HashID,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserDevices = `-- name: ListUserDevices :many
select id, name, user_id, hash_id, last_used_at, created_at, updated_at from device
where user_id = $1
`

func (q *Queries) ListUserDevices(ctx context.Context, userID int64) ([]Device, error) {
	rows, err := q.db.Query(ctx, listUserDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.HashID,
			&i.LastUsedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDevice = `-- name: UpdateUserDevice :exec
update device
  set name = $1
where id = $2
`

type UpdateUserDeviceParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUserDevice(ctx context.Context, arg UpdateUserDeviceParams) error {
	_, err := q.db.Exec(ctx, updateUserDevice, arg.Name, arg.ID)
	return err
}

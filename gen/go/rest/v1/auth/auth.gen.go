// Package authv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package authv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/sazonovItas/mocosso/gen/go/rest/v1/common"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	// AccessToken Access token
	AccessToken string `json:"access_token"`
}

// EmailRequest defines model for EmailRequest.
type EmailRequest struct {
	// Email User email
	Email string `json:"email"`
}

// ResetPasswordRequest defines model for ResetPasswordRequest.
type ResetPasswordRequest struct {
	// Code Code for the verification
	Code string `json:"code"`

	// NewPassword New user password
	NewPassword string `json:"new_password"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	// Email User email
	Email openapi_types.Email `json:"email"`

	// Password User password
	Password string `json:"password"`
}

// UserRegisterRequest defines model for UserRegisterRequest.
type UserRegisterRequest struct {
	// Email User email
	Email openapi_types.Email `json:"email"`

	// Password User password
	Password string `json:"password"`

	// Username User's name
	Username string `json:"username"`
}

// VerificationCodeRequest defines model for VerificationCodeRequest.
type VerificationCodeRequest struct {
	// Code Code for the verification
	Code string `json:"code"`

	// RedirectUri URI for redirection
	RedirectUri *string `json:"redirect_uri,omitempty"`
}

// LoginParams defines parameters for Login.
type LoginParams struct {
	Remember  *string `form:"remember,omitempty" json:"remember,omitempty"`
	UserAgent string  `json:"User-Agent"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	FromAll *bool `form:"from_all,omitempty" json:"from_all,omitempty"`
}

// RefreshParams defines parameters for Refresh.
type RefreshParams struct {
	RefreshToken string `form:"refresh_token" json:"refresh_token"`
}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// ResetPasswordParams defines parameters for ResetPassword.
type ResetPasswordParams struct {
	Token string `form:"token" json:"token"`
}

// VerifyEmailTokenParams defines parameters for VerifyEmailToken.
type VerifyEmailTokenParams struct {
	Token string `form:"token" json:"token"`
}

// VerifyEmailParams defines parameters for VerifyEmail.
type VerifyEmailParams struct {
	Token string `form:"token" json:"token"`
}

// VerifyPasswordResetParams defines parameters for VerifyPasswordReset.
type VerifyPasswordResetParams struct {
	Token string `form:"token" json:"token"`
}

// GeneratePasswordResetCodeJSONRequestBody defines body for GeneratePasswordResetCode for application/json ContentType.
type GeneratePasswordResetCodeJSONRequestBody = EmailRequest

// GeneratePasswordResetCodeFormdataRequestBody defines body for GeneratePasswordResetCode for application/x-www-form-urlencoded ContentType.
type GeneratePasswordResetCodeFormdataRequestBody = EmailRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = UserRegisterRequest

// RegisterFormdataRequestBody defines body for Register for application/x-www-form-urlencoded ContentType.
type RegisterFormdataRequestBody = UserRegisterRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerificationCodeRequest

// VerifyEmailFormdataRequestBody defines body for VerifyEmail for application/x-www-form-urlencoded ContentType.
type VerifyEmailFormdataRequestBody = VerificationCodeRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// IntrospectToken request
	IntrospectToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneratePasswordResetCodeWithBody request with any body
	GeneratePasswordResetCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GeneratePasswordResetCode(ctx context.Context, body GeneratePasswordResetCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GeneratePasswordResetCodeWithFormdataBody(ctx context.Context, body GeneratePasswordResetCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Refresh request
	Refresh(ctx context.Context, params *RefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterWithBody request with any body
	RegisterWithBody(ctx context.Context, params *RegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, params *RegisterParams, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterWithFormdataBody(ctx context.Context, params *RegisterParams, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetPasswordWithBody request with any body
	ResetPasswordWithBody(ctx context.Context, params *ResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyEmailToken request
	VerifyEmailToken(ctx context.Context, params *VerifyEmailTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyEmailWithBody request with any body
	VerifyEmailWithBody(ctx context.Context, params *VerifyEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyEmail(ctx context.Context, params *VerifyEmailParams, body VerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyEmailWithFormdataBody(ctx context.Context, params *VerifyEmailParams, body VerifyEmailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyPasswordReset request
	VerifyPasswordReset(ctx context.Context, params *VerifyPasswordResetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) IntrospectToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntrospectTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneratePasswordResetCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneratePasswordResetCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneratePasswordResetCode(ctx context.Context, body GeneratePasswordResetCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneratePasswordResetCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneratePasswordResetCodeWithFormdataBody(ctx context.Context, body GeneratePasswordResetCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneratePasswordResetCodeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Refresh(ctx context.Context, params *RefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, params *RegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, params *RegisterParams, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithFormdataBody(ctx context.Context, params *RegisterParams, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPasswordWithBody(ctx context.Context, params *ResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPasswordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmailToken(ctx context.Context, params *VerifyEmailTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmailWithBody(ctx context.Context, params *VerifyEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmail(ctx context.Context, params *VerifyEmailParams, body VerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmailWithFormdataBody(ctx context.Context, params *VerifyEmailParams, body VerifyEmailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyPasswordReset(ctx context.Context, params *VerifyPasswordResetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyPasswordResetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewIntrospectTokenRequest generates requests for IntrospectToken
func NewIntrospectTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/introspect-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, params *LoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Remember != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remember", runtime.ParamLocationQuery, *params.Remember); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, params.UserAgent)
		if err != nil {
			return nil, err
		}

		req.Header.Set("User-Agent", headerParam0)

	}

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string, params *LogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromAll != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_all", runtime.ParamLocationQuery, *params.FromAll); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneratePasswordResetCodeRequest calls the generic GeneratePasswordResetCode builder with application/json body
func NewGeneratePasswordResetCodeRequest(server string, body GeneratePasswordResetCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGeneratePasswordResetCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewGeneratePasswordResetCodeRequestWithFormdataBody calls the generic GeneratePasswordResetCode builder with application/x-www-form-urlencoded body
func NewGeneratePasswordResetCodeRequestWithFormdataBody(server string, body GeneratePasswordResetCodeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGeneratePasswordResetCodeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGeneratePasswordResetCodeRequestWithBody generates requests for GeneratePasswordResetCode with any type of body
func NewGeneratePasswordResetCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pass-reset-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefreshRequest generates requests for Refresh
func NewRefreshRequest(server string, params *RefreshParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var cookieParam0 string

		cookieParam0, err = runtime.StyleParamWithLocation("simple", true, "refresh_token", runtime.ParamLocationCookie, params.RefreshToken)
		if err != nil {
			return nil, err
		}

		cookie0 := &http.Cookie{
			Name:  "refresh_token",
			Value: cookieParam0,
		}
		req.AddCookie(cookie0)

	}
	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, params *RegisterParams, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRegisterRequestWithFormdataBody calls the generic Register builder with application/x-www-form-urlencoded body
func NewRegisterRequestWithFormdataBody(server string, params *RegisterParams, body RegisterFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegisterRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, params *RegisterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetPasswordRequestWithBody generates requests for ResetPassword with any type of body
func NewResetPasswordRequestWithBody(server string, params *ResetPasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reset-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyEmailTokenRequest generates requests for VerifyEmailToken
func NewVerifyEmailTokenRequest(server string, params *VerifyEmailTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyEmailRequest calls the generic VerifyEmail builder with application/json body
func NewVerifyEmailRequest(server string, params *VerifyEmailParams, body VerifyEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyEmailRequestWithBody(server, params, "application/json", bodyReader)
}

// NewVerifyEmailRequestWithFormdataBody calls the generic VerifyEmail builder with application/x-www-form-urlencoded body
func NewVerifyEmailRequestWithFormdataBody(server string, params *VerifyEmailParams, body VerifyEmailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewVerifyEmailRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewVerifyEmailRequestWithBody generates requests for VerifyEmail with any type of body
func NewVerifyEmailRequestWithBody(server string, params *VerifyEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyPasswordResetRequest generates requests for VerifyPasswordReset
func NewVerifyPasswordResetRequest(server string, params *VerifyPasswordResetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify/password-reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// IntrospectTokenWithResponse request
	IntrospectTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IntrospectTokenResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// GeneratePasswordResetCodeWithBodyWithResponse request with any body
	GeneratePasswordResetCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error)

	GeneratePasswordResetCodeWithResponse(ctx context.Context, body GeneratePasswordResetCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error)

	GeneratePasswordResetCodeWithFormdataBodyWithResponse(ctx context.Context, body GeneratePasswordResetCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error)

	// RefreshWithResponse request
	RefreshWithResponse(ctx context.Context, params *RefreshParams, reqEditors ...RequestEditorFn) (*RefreshResponse, error)

	// RegisterWithBodyWithResponse request with any body
	RegisterWithBodyWithResponse(ctx context.Context, params *RegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, params *RegisterParams, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithFormdataBodyWithResponse(ctx context.Context, params *RegisterParams, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// ResetPasswordWithBodyWithResponse request with any body
	ResetPasswordWithBodyWithResponse(ctx context.Context, params *ResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error)

	// VerifyEmailTokenWithResponse request
	VerifyEmailTokenWithResponse(ctx context.Context, params *VerifyEmailTokenParams, reqEditors ...RequestEditorFn) (*VerifyEmailTokenResponse, error)

	// VerifyEmailWithBodyWithResponse request with any body
	VerifyEmailWithBodyWithResponse(ctx context.Context, params *VerifyEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error)

	VerifyEmailWithResponse(ctx context.Context, params *VerifyEmailParams, body VerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error)

	VerifyEmailWithFormdataBodyWithResponse(ctx context.Context, params *VerifyEmailParams, body VerifyEmailFormdataRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error)

	// VerifyPasswordResetWithResponse request
	VerifyPasswordResetWithResponse(ctx context.Context, params *VerifyPasswordResetParams, reqEditors ...RequestEditorFn) (*VerifyPasswordResetResponse, error)
}

type IntrospectTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *externalRef0.Error
	JSON401 *externalRef0.Error
	JSON5XX *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r IntrospectTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntrospectTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponse
	JSON400      *externalRef0.Error
	JSON404      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.Error
	JSON401      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneratePasswordResetCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneratePasswordResetCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneratePasswordResetCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponse
	JSON400      *externalRef0.Error
	JSON401      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r RefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r ResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyEmailTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.Error
	JSON404      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r VerifyEmailTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyEmailTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.Error
	JSON404      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r VerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *externalRef0.Error
	JSON404      *externalRef0.Error
	JSON5XX      *externalRef0.Error
}

// Status returns HTTPResponse.Status
func (r VerifyPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IntrospectTokenWithResponse request returning *IntrospectTokenResponse
func (c *ClientWithResponses) IntrospectTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IntrospectTokenResponse, error) {
	rsp, err := c.IntrospectToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntrospectTokenResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, params *LogoutParams, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// GeneratePasswordResetCodeWithBodyWithResponse request with arbitrary body returning *GeneratePasswordResetCodeResponse
func (c *ClientWithResponses) GeneratePasswordResetCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error) {
	rsp, err := c.GeneratePasswordResetCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneratePasswordResetCodeResponse(rsp)
}

func (c *ClientWithResponses) GeneratePasswordResetCodeWithResponse(ctx context.Context, body GeneratePasswordResetCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error) {
	rsp, err := c.GeneratePasswordResetCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneratePasswordResetCodeResponse(rsp)
}

func (c *ClientWithResponses) GeneratePasswordResetCodeWithFormdataBodyWithResponse(ctx context.Context, body GeneratePasswordResetCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*GeneratePasswordResetCodeResponse, error) {
	rsp, err := c.GeneratePasswordResetCodeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneratePasswordResetCodeResponse(rsp)
}

// RefreshWithResponse request returning *RefreshResponse
func (c *ClientWithResponses) RefreshWithResponse(ctx context.Context, params *RefreshParams, reqEditors ...RequestEditorFn) (*RefreshResponse, error) {
	rsp, err := c.Refresh(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, params *RegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, params *RegisterParams, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithFormdataBodyWithResponse(ctx context.Context, params *RegisterParams, body RegisterFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// ResetPasswordWithBodyWithResponse request with arbitrary body returning *ResetPasswordResponse
func (c *ClientWithResponses) ResetPasswordWithBodyWithResponse(ctx context.Context, params *ResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error) {
	rsp, err := c.ResetPasswordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPasswordResponse(rsp)
}

// VerifyEmailTokenWithResponse request returning *VerifyEmailTokenResponse
func (c *ClientWithResponses) VerifyEmailTokenWithResponse(ctx context.Context, params *VerifyEmailTokenParams, reqEditors ...RequestEditorFn) (*VerifyEmailTokenResponse, error) {
	rsp, err := c.VerifyEmailToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailTokenResponse(rsp)
}

// VerifyEmailWithBodyWithResponse request with arbitrary body returning *VerifyEmailResponse
func (c *ClientWithResponses) VerifyEmailWithBodyWithResponse(ctx context.Context, params *VerifyEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error) {
	rsp, err := c.VerifyEmailWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailResponse(rsp)
}

func (c *ClientWithResponses) VerifyEmailWithResponse(ctx context.Context, params *VerifyEmailParams, body VerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error) {
	rsp, err := c.VerifyEmail(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailResponse(rsp)
}

func (c *ClientWithResponses) VerifyEmailWithFormdataBodyWithResponse(ctx context.Context, params *VerifyEmailParams, body VerifyEmailFormdataRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailResponse, error) {
	rsp, err := c.VerifyEmailWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailResponse(rsp)
}

// VerifyPasswordResetWithResponse request returning *VerifyPasswordResetResponse
func (c *ClientWithResponses) VerifyPasswordResetWithResponse(ctx context.Context, params *VerifyPasswordResetParams, reqEditors ...RequestEditorFn) (*VerifyPasswordResetResponse, error) {
	rsp, err := c.VerifyPasswordReset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyPasswordResetResponse(rsp)
}

// ParseIntrospectTokenResponse parses an HTTP response from a IntrospectTokenWithResponse call
func ParseIntrospectTokenResponse(rsp *http.Response) (*IntrospectTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntrospectTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGeneratePasswordResetCodeResponse parses an HTTP response from a GeneratePasswordResetCodeWithResponse call
func ParseGeneratePasswordResetCodeResponse(rsp *http.Response) (*GeneratePasswordResetCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneratePasswordResetCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRefreshResponse parses an HTTP response from a RefreshWithResponse call
func ParseRefreshResponse(rsp *http.Response) (*RefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseResetPasswordResponse parses an HTTP response from a ResetPasswordWithResponse call
func ParseResetPasswordResponse(rsp *http.Response) (*ResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseVerifyEmailTokenResponse parses an HTTP response from a VerifyEmailTokenWithResponse call
func ParseVerifyEmailTokenResponse(rsp *http.Response) (*VerifyEmailTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyEmailTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseVerifyEmailResponse parses an HTTP response from a VerifyEmailWithResponse call
func ParseVerifyEmailResponse(rsp *http.Response) (*VerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseVerifyPasswordResetResponse parses an HTTP response from a VerifyPasswordResetWithResponse call
func ParseVerifyPasswordResetResponse(rsp *http.Response) (*VerifyPasswordResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest externalRef0.Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /introspect-token)
	IntrospectToken(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request, params LoginParams)

	// (POST /logout)
	Logout(w http.ResponseWriter, r *http.Request, params LogoutParams)

	// (PUT /pass-reset-code)
	GeneratePasswordResetCode(w http.ResponseWriter, r *http.Request)

	// (GET /refresh)
	Refresh(w http.ResponseWriter, r *http.Request, params RefreshParams)

	// (POST /register)
	Register(w http.ResponseWriter, r *http.Request, params RegisterParams)

	// (POST /reset-password)
	ResetPassword(w http.ResponseWriter, r *http.Request, params ResetPasswordParams)

	// (GET /verify/email)
	VerifyEmailToken(w http.ResponseWriter, r *http.Request, params VerifyEmailTokenParams)

	// (POST /verify/email)
	VerifyEmail(w http.ResponseWriter, r *http.Request, params VerifyEmailParams)

	// (GET /verify/password-reset)
	VerifyPasswordReset(w http.ResponseWriter, r *http.Request, params VerifyPasswordResetParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /introspect-token)
func (_ Unimplemented) IntrospectToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request, params LoginParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /logout)
func (_ Unimplemented) Logout(w http.ResponseWriter, r *http.Request, params LogoutParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /pass-reset-code)
func (_ Unimplemented) GeneratePasswordResetCode(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /refresh)
func (_ Unimplemented) Refresh(w http.ResponseWriter, r *http.Request, params RefreshParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register)
func (_ Unimplemented) Register(w http.ResponseWriter, r *http.Request, params RegisterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /reset-password)
func (_ Unimplemented) ResetPassword(w http.ResponseWriter, r *http.Request, params ResetPasswordParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /verify/email)
func (_ Unimplemented) VerifyEmailToken(w http.ResponseWriter, r *http.Request, params VerifyEmailTokenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /verify/email)
func (_ Unimplemented) VerifyEmail(w http.ResponseWriter, r *http.Request, params VerifyEmailParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /verify/password-reset)
func (_ Unimplemented) VerifyPasswordReset(w http.ResponseWriter, r *http.Request, params VerifyPasswordResetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IntrospectToken operation middleware
func (siw *ServerInterfaceWrapper) IntrospectToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IntrospectToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginParams

	// ------------- Optional query parameter "remember" -------------

	err = runtime.BindQueryParameter("form", true, false, "remember", r.URL.Query(), &params.Remember)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remember", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "User-Agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", valueList[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "User-Agent", Err: err})
			return
		}

		params.UserAgent = UserAgent

	} else {
		err := fmt.Errorf("Header parameter User-Agent is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "User-Agent", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutParams

	// ------------- Optional query parameter "from_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_all", r.URL.Query(), &params.FromAll)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from_all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GeneratePasswordResetCode operation middleware
func (siw *ServerInterfaceWrapper) GeneratePasswordResetCode(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GeneratePasswordResetCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Refresh operation middleware
func (siw *ServerInterfaceWrapper) Refresh(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	{
		var cookie *http.Cookie

		if cookie, err = r.Cookie("refresh_token"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
			if err != nil {
				siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh_token", Err: err})
				return
			}
			params.RefreshToken = value

		} else {
			siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refresh_token"})
			return
		}
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Refresh(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParams

	// ------------- Optional query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect_uri", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetPassword operation middleware
func (siw *ServerInterfaceWrapper) ResetPassword(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ResetPasswordParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetPassword(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyEmailToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmailToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyEmailTokenParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyEmailToken(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyEmailParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyEmail(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) VerifyPasswordReset(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyPasswordResetParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyPasswordReset(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/introspect-token", wrapper.IntrospectToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pass-reset-code", wrapper.GeneratePasswordResetCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/refresh", wrapper.Refresh)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.Register)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/reset-password", wrapper.ResetPassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/verify/email", wrapper.VerifyEmailToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/verify/email", wrapper.VerifyEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/verify/password-reset", wrapper.VerifyPasswordReset)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+KwI3YC9WlLTdi97SrBsyDMPgpFuBwDBo6SyzlUjlSNn1Av334UjJli0p",
	"sRs7yYo8JRaPd7y777478o5FKsuVBGk0C++YjmaQcfvveRSB1tfqC8gh6FxJDfQ5R5UDGgFWiFuhsSEp",
	"+h2DjlDkRijJwkqF51YHzCxzYCHTBoVMWFkOGMJtIRBiFt5sqhqVA/Yh4yIdwm0B2rQtA622TX7UgJ5b",
	"e8igkyJLQ9Bg/uJaLxTGvRYjFUPb4IWKwZsq9MwMvDmgmIqI27WW/QGTsBjnlZ22qj9h4RV0/pXIQy7Y",
	"I22pJYcoCn+oRMhHhW+qMOOGhawnngPW78vHvfyoDbScGEIitKG/L9OPAaOESZ5B99aftGcXdw3ASttW",
	"LP5uAIsQd0yQIsQCITLjAkWHV8NLq6mW6lTSBVNyI1JZpuSY52L8AVHhrue3wl6F9lU6hTRv36yNC2kg",
	"ASQXNnZ3K2t+6whCBlrzpPco9fKOBVqLj1byavIZIsMG7KufKL/6ODMmL4xI9YmLTmPVF1mu0CbcoW0t",
	"bLFiZixkiTCzYnISqSzQ/F8l1fzScB1kKlJaq4AChJKnwYzLOAUMSEXgdJR0cg1RgcIsr6gLuHy8B46A",
	"5wXpv2MT++vXOgG//3PNBq5n0Inc6jompN4pFnKq2qH8RUVFBtJYJFpQaSGTFDwtEukp6SFo4/FckEph",
	"UtJ51SsxB9RO79nJ6ckpJVHlIGkxZG/tJxco6xcFA5XOITL+qnslYANMeLRnuoxZyC5XgtdVH8OqHVpF",
	"b05PHW6lAWm38zxPq/IKPmuHQNdX23DXhe169G8VtIlSKXBpkbSJldKG8t2e9n5EmLKQ/RCsG31Qdfmg",
	"VY61ibNjm/j506fjmmigmYU3mzi+GZUjEghSapE2KUp3ZN52UAsa5BkYQG1V0RZ2WwAuqfW6YkTIIJtY",
	"8K8P3aKGau8MeGxFq83UKPzzhALRZA+DBdynbuSEQZv3Kl4+LoatgYHi01T31V8sFj5Rr19gCpKILX6k",
	"/lX2ZZGm5SPr6j7rXaOshYjLhLV3Bca/UOqLgPvqFWGKoGfrgbdN/89WtO/+/0VbV6UqzL1lSes71eUU",
	"VTbmadpVl2umHXVi75VsD0q2NM/6SDctvx7y8qIjvb+BpJ+wvo9pMBdujtriu4N4tHHNPDDtbekuN0nO",
	"0h6FpmKV3hFkWK13Qz5yrNXoRU2O2rujPC0HvxbZfuSI1YW4nx7rK/Oug0vjsrfftHEQV7su+UeYPdom",
	"yu3CaA8gZ64JPFlmiRqbLxF9+W08Vu2W5G9kgr5st1ztfD/bZrunj6h96FgGqyeiTm61LytLS9T1/e54",
	"EX22GeN7mA0HPQXRyOCzlMO3O9r3qndgAuw3U5avqDwc0dTc7abcBxhnY7x9JZ0Xm157t8F5nZcCUxay",
	"gOcimJ8FvGDlqPwvAAD//92TE3FFGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common/api.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
